node {
    stage ("Deployment on AZ B") {
        script {
            env.AZName = "b"
            }  
        echo "Starting deployment on AZ ${env.AZName}"
        }
    
    stage ('Suspend Autoscaling Before Deployment') {
        build job: 'BigParser_Autoscaling_Suspend_Resume_ENV_Prod', parameters: [string(name: 'Action', value: "suspend"), string(name: 'Group', value: "test1,test2")]
        }
    stage ('Deregister AZ'+ env.AZName +' instance from main ELB Before Deployment') {
    
    sh (
    cd /var/lib/jenkins/scripts/prod/elb_manage/
    python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2'${env.AZName},'fe-load-balancer')"   
    )   
    sh ''' 
    cd /var/lib/jenkins/scripts/prod/elb_manage/
    python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','test-fe-load-balancer')"   
    '''
    sh ''' 
    cd /var/lib/jenkins/scripts/prod/elb_manage/
    python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','be-load-balancer')"   
    '''    
    sh ''' 
    cd /var/lib/jenkins/scripts/prod/elb_manage/
    python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','test-be-load-balancer')"   
    '''    
    }
    stage ('Deployment Of Framework On AZ B') {
        build job: 'BigParser_BE_Framework_Deploy_Prod'
    }
    stage ('Deployment Of Common Services On AZ B') {
        build job: 'BigParser_BE_Common_Services_Deploy_Prod', propagate: false
    }
    stage ('Deployment Of BE API On AZ B') {
        build job: 'BigParser_BE_API_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
    }
    stage ('Deployment Of BE JobSchulder On AZ B') {
        build job: 'BigParser_BE_JobSchulder_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
    }
    stage ('Deployment Of BE Connectors On AZ B') {
        build job: 'BigParser_BE_Connectors_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
    }
    stage ('Deployment Of BE Crud On AZ B') {
        build job: 'BigParser_BE_Crud-Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
    }
    stage ('Deployment Of FE Data On AZ B') {
        build job: 'BigParser_FE_Data_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
    }
    stage ("DEPLOY ACTION For AZ A") {    
        script {
            env.RequestedAction = input message: 'Do you want to proceed for deployment on AZ A??', ok: 'Deploy On Az A Or Revert B',
            parameters: [choice(choices: "Approve\nReject", description: 'You want to Approve/Reject deployment on AZ A.', name: 'Requested_Action')]
        }  
        echo "You have ${env.RequestedAction} to deploy on AZA "
    }
    if ( env.RequestedAction == "Approve" ){
        print "Hello World"
            script {
                env.AZName = "a"
            }  
            echo "Starting deployment on AZ ${env.AZName}"
        stage ('Register AZB Instances to Main ELB\'s' ) {
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-fe-load-balancer')"   
            '''
            
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','fe-load-balancer')"   
            '''
          
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-be-load-balancer')"   
            '''
            
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','be-load-balancer')"   
            '''
        }
        sleep 5
        stage ('Register AZA Instances to test ELB\'s') {
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','fe-load-balancer')"   
            '''            
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','test-fe-load-balancer')"   
            '''
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','be-load-balancer')"   
            '''        
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','test-be-load-balancer')"   
            '''
        }
        stage ('Deployment Of BE API On AZ A') {
        build job: 'BigParser_BE_API_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Deployment Of BE JobSchulder On AZ A') {
            build job: 'BigParser_BE_JobSchulder_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Deployment Of BE Connectors On AZ A') {
            build job: 'BigParser_BE_Connectors_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Deployment Of BE Crud On AZ A') {
            build job: 'BigParser_BE_Crud-Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Deployment Of FE Data On AZ A') {
            build job: 'BigParser_FE_Data_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ("ACTION To Finalize Deployment") {    
            script {
                env.Action = input message: 'Do you want to finalize deployment ??', ok: 'Submit',
                parameters: [choice(choices: "Approve\nReject", description: 'You want to Approve/Reject to finalize deployment.', name: 'Action')]
            }  
                echo "You have ${env.Action} to finalize deployment."
        }
        if ( env.Action == "Approve" ){
            print "Hi World"
            
            stage ('Deploy Artifact & Enable Autoscaling') {
                build job: 'BigParser_Autoscaling_Artiface_Deploy_Prod'
            }
            stage ('Register AZA Instances to main ELB') {
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-be-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','be-load-balancer')"   
                '''
            }        
            stage ('Resume Autoscaling After Deployment') {
                build job: 'BigParser_Autoscaling_Suspend_Resume_ENV_Prod', parameters: [string(name: 'Action', value: "resume"), string(name: 'Group', value: "test1,test2")]
            }
        }else{
            stage ("Action For Complete Deployment Or Rollback") {
            script {
                    env.finalAction = input message: 'Have You tested AZA?? Is it working fine now. If yes than Approve', ok: 'Submit',
                    parameters: [choice(choices: "Approve\nReject", description: 'Warning:: Approve to finalize deployment Or Reject to Complete Rollback', name: 'Action')]
                }  
            echo "You have ${env.finalAction} to finalize deployment Or Complete Rollback"
            }
            if ( env.finalAction == "Approve" ){
                print "Hi World"
                stage ('Deploy Artifact') {
                    build job: 'BigParser_Autoscaling_Artiface_Deploy_Prod'
                }
                stage ('Register AZA Instances to main ELB') {
                    sh ''' 
                    cd /var/lib/jenkins/scripts/prod/elb_manage/
                    python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-fe-load-balancer')"   
                    '''                    
                    sh ''' 
                    cd /var/lib/jenkins/scripts/prod/elb_manage/
                    python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','fe-load-balancer')"   
                    '''                
                    sh ''' 
                    cd /var/lib/jenkins/scripts/prod/elb_manage/
                    python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-be-load-balancer')"   
                    '''                    
                    sh ''' 
                    cd /var/lib/jenkins/scripts/prod/elb_manage/
                    python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','be-load-balancer')"   
                    '''
                    }
                stage ('Resume Autoscaling After Deployment') {
                    build job: 'BigParser_Autoscaling_Suspend_Resume_ENV_Prod', parameters: [string(name: 'Action', value: "resume"), string(name: 'Group', value: "test1,test2")]
                }
            }else{
                stage ('Complete Rollback Pipeline') {
                        print "This will run complete Rollback Pipeline"
                        script {    
                            env.AZName = "a"
                        }  
                    echo "Starting Revert Jobs on AZ ${env.AZName}"
                }
            stage ('Revert_BE_API On AZ A') {
                build job: 'BigParser_BE_API_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert Of BE Connectors On AZ A') {
                build job: 'BigParser_BE_Connectors_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert Of BE Jobschulder On AZ A') {
                build job: 'BigParser_BE_Jobschulder_Revert_Release_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }            
            stage ('Revert oF BE Crud On AZ A') {
                build job: 'BigParser_BE_Crud_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert Of FE Revert On AZ A') {
                build job: 'BigParser_FE_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Register AZA Instances to main ELB After Revert') {
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2c','test-be-load-balancer')"   
                '''                
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2c','be-load-balancer')"   
                '''
            }
            stage ("Revert Deployment on AZ B") {
                script {
                    env.AZName = "b"
                }     
                echo "Starting Revert deployment on AZ ${env.AZName}"
            }
            stage ('Deregister main ELB from AZB Before Revert Deployment') {                
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','test-fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','be-load-balancer')"   
                '''                
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','test-be-load-balancer')"   
                '''                
            }
            stage ('Revert_BE_API On AZ B') {
                build job: 'BigParser_BE_API_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }    
            stage ('Revert Of BE Connectors On AZ B') {
                build job: 'BigParser_BE_Connectors_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert Of BE Jobschulder On AZ B') {
                build job: 'BigParser_BE_Jobschulder_Revert_Release_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert oF BE Crud On AZ B') {
                build job: 'BigParser_BE_Crud_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Revert Of FE Revert On AZ B') {
                build job: 'BigParser_FE_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
            }
            stage ('Register AZ B instances to main ELB after Revert Deployment') {                
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-fe-load-balancer')"   
                '''                
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','fe-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-be-load-balancer')"   
                '''
                sh ''' 
                cd /var/lib/jenkins/scripts/prod/elb_manage/
                python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','be-load-balancer')"   
                '''
            }                
            stage ('Resume Autoscaling After Deployment') {
                build job: 'BigParser_Autoscaling_Suspend_Resume_ENV_Prod', parameters: [string(name: 'Action', value: "resume"), string(name: 'Group', value: "test1,test2")]
            }
          }
        }  
        
    }else{
        stage ("Revert Code Deployment on AZB") {
        script {
            env.AZName = "b"
            }  
        echo "Starting Revert deployment on AZ ${env.AZName}"
        }
        stage ('Revert_BE_API On AZ B') {
                build job: 'BigParser_BE_API_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }      
        stage ('Revert Of BE Connectors On AZ B') {
            build job: 'BigParser_BE_Connectors_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Revert Of BE Jobschulder On AZ B') {
            build job: 'BigParser_BE_Jobschulder_Revert_Release_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Revert oF BE Crud On AZ B') {
            build job: 'BigParser_BE_Crud_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Revert Of FE Revert On AZ B') {
            build job: 'BigParser_FE_Revert_Release_Deploy_Prod', parameters: [[$class: 'StringParameterValue', name: 'az', value: "${env.AZName}"]]
        }
        stage ('Register AZB to main ELB After Revert Deployment') {
    
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-fe-load-balancer')"   
            '''
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','fe-load-balancer')"   
            '''
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.deregister('us-west-2b','test-be-load-balancer')"   
            '''
            sh ''' 
            cd /var/lib/jenkins/scripts/prod/elb_manage/
            python -c"import elbRegisterDeregister; elbRegisterDeregister.register('us-west-2b','be-load-balancer')"   
            '''
        }
        stage ('Resume Autoscaling After Deployment') {
        build job: 'BigParser_Autoscaling_Suspend_Resume_ENV_Prod', parameters: [string(name: 'Action', value: "resume"), string(name: 'Group', value: "test1,test2")]
        }
    }        
}
